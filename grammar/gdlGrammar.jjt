/*
 */

options {
  MULTI = true;
  VISITOR = true;
  STATIC = false;
}

PARSER_BEGIN(GdlParser)

package runtime.parser;

import runtime.main.Log;
import runtime.visitors.DataVisitor;

@SuppressWarnings("unchecked")
public class GdlParser {

  public static void main(String args[]) {
    GdlParser parser;
    if (args.length == 0) {
      Log.status("Guideline Parser :  Reading from standard input . . .");
      parser = new GdlParser(System.in);
    } else if (args.length == 1) {
      Log.status("Guideline Parser :  Reading from file " + args[0] + " . . .");
      try {
        parser = new GdlParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        Log.error("Guideline Parser :  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Guideline Parser :  Usage is one of:");
      System.out.println("         java GdlParser < inputfile");
      System.out.println("OR");
      System.out.println("         java GdlParser inputfile");
      return;
    }
    try {
      ASTCompilationUnit cu = parser.CompilationUnit();
      Log.status("Guideline Parser :  Guideline parsed successfully.");
        dump(cu);
    } catch (ParseException e) {
      Log.error("Guideline Parser :  Encountered errors during parse.");
      Log.error(e.toString());
    }
  }

  public void dump() {
        ((SimpleNode)jjtree.rootNode()).dump(">");
  
  }
  
  public static void dump(ASTCompilationUnit cu) {
        DataVisitor v=new DataVisitor();
  
        System.out.println(cu.jjtAccept(v,null));
    }
    

}

PARSER_END(GdlParser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
// | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">	// Disabling this and setting up the following...
}


SKIP :
{														// This changes the lexical state so that tokens are
<"/*">: INSIDE_COMMENT									// not matched (the tokens only match in the DEFAULT
}														// state). This method does NOT allow nested multi-line comments.

<INSIDE_COMMENT>
SKIP:
{														// This sets the state back to DEFAULT when the ending
        <"*/">: DEFAULT									// tag for the multi-line comment is parsed.
|       <~[]>											// See http://www.cs.utsa.edu/~danlo/teaching/cs4713/lecture/node16.html
}


TOKEN :  /* GDL Keywords */
{
  < ALIAS:    "alias">
| < INCLUDE:  "include">
| < IMPORT:   "import">
}



TOKEN :  /* GDL Keywords 2 */
{
  < DPM:      "dpm">
| < DSM:      "dsm">
| < PPM:      "ppm">
}



TOKEN :  /* GDL Keywords 3 */
{
  < LOOKUP:			"lookup">
| < POWERLOOKUP: 	"powerlookup">
}



TOKEN :  /* GDL Keywords 4 (Casting) */
{
  < CAST_DPM: "DPM">
| < CAST_PPM: "PPM">
}



SPECIAL_TOKEN :  /* DPM Variable modifier */
{
  < DECISION: "decision">
}



TOKEN :  /* DPM Variable Types */
{
  < BOOLEAN:    "boolean">
| < DATE:       "date">
| < MONEY:      "money">
| < NUMERIC:    "numeric">
| < PERCENTAGE: "percentage">
| < TEXT:       "text">
}

TOKEN :  /* PPM Variable Types */
{
  < APPLICATION:"app">
| < CREDIT:     "crd">
| < PRODUCT:    "prd">
}



TOKEN :  /* Guideline Keywords */
{
  < GUIDELINE:  "guideline">
| < INSERT_PRICING_GUIDELINE:    "InsertPricingGuideline">
| < RULESET:    "ruleset">
| < RULE:       "rule">
| < MESSAGE:    "message">
| < CONDITION:  "condition">
| < IF:         "if">
| < THEN:       "then">
| < ELSE:       "else">
| < END:        "end">
| < TRUE:       ( "true" | "True" | "TRUE" ) >
| < FALSE:      ( "false" | "False" | "FALSE" ) >
| < CONTINUE:   "continue">
| < XMLFUNC:   	"xmlfunc">
}



TOKEN :  /* Guideline 'Message' Keywords */
{
  < MSG_EXC:          "exception">
| < MSG_FINDINGS:     "findings">
| < MSG_OBSERVATION:  "observation">
| < MSG_CREDIT:       "credit">
}



TOKEN :  /* Guideline Condition Message 'ConditionType' Keywords */
{
  < CONDTYPE_ASSET:  	"asset">
| < CONDTYPE_INCOME:  	"income">
| < CONDTYPE_PROPERTY:  "property">
| < CONDTYPE_PURCHASE:  "purchase">
| < CONDTYPE_TITLE:  	"title">
}



TOKEN :  /* Guideline Condition Message 'PriorTo' Keywords */
{
  < CONDPRIORTO_DOCS:  		"docs">
| < CONDPRIORTO_FUNDING:  	"funding">
| < CONDPRIORTO_APPROVAL:  	"approval">
}



TOKEN :  /* XML Function input/output var indicators */
{
  < IND_IN:		"IN">
| < IND_OUT:    "OUT">
}



TOKEN :
{ 
    < NUMERIC_CONSTANT: ( <INTEGER_LITERAL> | <FLOATING_POINT_LITERAL> ) >
}


TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: (["-"])? ["0"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      ("\""
      (   (~["\"","\n","\r"])
      )*
      "\"")
    |  ("'"
      (   (~["'","\n","\r"])
      )*
      "'")
  >
|
  < CODE_BLOCK:
      ("{"
      (   (~["}"])
      )*
      "}")
  >
}


TOKEN :   /* Separators */
{
  < LPAREN:     "(" >
| < RPAREN:     ")" >
| < LBRACE:     "{" >
| < RBRACE:     "}" >
| < LBRACKET:   "[" >
| < RBRACKET:   "]" >
| < SEMICOLON:  ";" >
| < COMMA:      "," >
| < DOT:        "." >
}
  

TOKEN :   /* Special tokens */
{
  < PL:         "PL">
| < ASSIGN:     "=">
| < QUOTE:      "'">
| < DQUOTE:     "\"">
}
/* | < EOL:        "\n">
*/



TOKEN :  /* Math Operators */
{
  < PLUS:     "+" >
| < MINUS:    "-">
| < MULT:     "*">
| < DIV:      "/">
| < RAISETO:  "^">
}
  


TOKEN :  /* Equality Operators */
{
  < EQU:    "==" >
| < NEQ1:   "!=">
| < NEQ2:   "<>">
| < LT:     "<">
| < GT:     ">">
| < LEQ:    "<=">
| < GEQ:    ">=">
| < IN1:    "in">
| < IN2:    "??">
}
  



TOKEN :  /* Boolean Operators */
{
  < AND1:   "&&" >
| < AND2:   "and" >
| < OR1:    "||">
| < OR2:    "or">
}
  


TOKEN :  /* Misc Symbols*/
{
  < STRING:   "$" >
}
  


TOKEN :  /* Reserved Constants */
{
  < CONST_NULL:		( "NULL" | "Null" | "null" ) >
}
  


/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> ( "-" | <LETTER>|<DIGIT>)* >
|
  < #LETTER:
      ["_","a"-"z","A"-"Z"]
  >
|
  < #DIGIT:
      ["0"-"9"]
  >
}


/* CompilationUnit */
ASTCompilationUnit CompilationUnit() :
{}
{
  ( VarDef()
  | (LookupDef() EOS()) 
  | Alias() 
  | Import() 
  | Include()
  | LOOKAHEAD(3)FunctionDef()
  | FunctionRef() 
  | RuleDef() 
  | RulesetDef()
  | XmlFuncDef()
  | ConditionMsgDef() )* 
  ( GuidelineDef() )? 
  <EOF>  
  { return jjtThis; }
}


void VarDef() :
{
	String nm,dtyp,typ,als,prcsn;
	Token t;
}
{
  ( t=<DPM> typ=VarType(){
	  		jjtThis.data.put("ProductType",typ);
	  		if( null != t.specialToken ){
	  			jjtThis.data.put("Type","DSM");
	  		} else {
	  			jjtThis.data.put("Type","DPM");
	  		}
	  		jjtThis.data.put("varType","DPM");
	  	} (prcsn=Precision(){jjtThis.data.put("Precision",prcsn);})? 
		nm=Name(){
	  		jjtThis.data.put("Name",nm);
	  	} 
		(als=AliasOf(){jjtThis.data.put("Alias",als);})? EOS() )
  | ( <PPM> dtyp=VarDataType(){
	  		jjtThis.data.put("DataType",dtyp);
  		} typ=PpmVarType(){
	  		jjtThis.data.put("Type",typ);
	  		jjtThis.data.put("varType","PPM");
	  	} nm=Name(){
	  		jjtThis.data.put("Name",nm);
	  	} 
		(als=AliasOf(){jjtThis.data.put("Alias",als);})? EOS() )
}

String VarType() #void :
{}
{
  <BOOLEAN>       { return new String("1");}
  | <DATE>        { return new String("2");}
  | <MONEY>       { return new String("3");}
  | <NUMERIC>     { return new String("4");}
  | <PERCENTAGE>  { return new String("5");}
  | <TEXT>        { return new String("6");}
} 


String Precision() #void :
{ 
	Token t;
}
{
  <LPAREN> t=<NUMERIC_CONSTANT> <RPAREN> { return t.image;} 
} 


String VarDataType() #void :
{}
{
  <BOOLEAN>       { return new String("Boolean");}
  | <DATE>        { return new String("Date");}
  | <MONEY>       { return new String("Money");}
  | <NUMERIC>     { return new String("Numeric");}
  | <PERCENTAGE>  { return new String("Percentage");}
  | <TEXT>        { return new String("Text");}
} 


String PpmVarType() #void :
{}
{
  <APPLICATION> 	{ return new String("APM");}
  | <CREDIT>      	{ return new String("CRD");}
  | <PRODUCT>     	{ return new String("PRD");}
}




void Alias() :
{String nm, alsTyp, als;}
{
  <ALIAS> <LPAREN> alsTyp=AliasType(){jjtThis.data.put("AliasType",alsTyp);} "," nm=Name(){jjtThis.data.put("Name",nm);} "," als=AliasOf(){jjtThis.data.put("Alias",als);} <RPAREN> EOS()
}



String AliasType() #void :
{}
{
  (<RULE>        
  | <RULESET>   
  | <CONDITION>   
  | <LOOKUP>    ){ return token.image;}
}


String AliasOf() #void :
{ String str;}
{
  str=StringLiteral(){return str;} 
}



void EOS() #void :
{}
{
  ( ";" )
}


void Import() :
{String it,fn;}
{
  <IMPORT> <LPAREN> (it=ImportType(){jjtThis.data.put("importType",it);}) "," (fn=Filename(){jjtThis.data.put("filename",fn);}) <RPAREN> EOS()
}


String Filename() #void :
{String str;}
{
  str=StringLiteral() { return str;}
}


String ImportType() #void :
{}
{
  ( <DPM>
  | <PPM>
  | <LOOKUP>
  | <POWERLOOKUP>
  ) { return token.image;}
}


void Include() :
{String fn;}
{
  <INCLUDE> fn=ParenFilenameLiteral(){jjtThis.data.put("filename",fn);} EOS()
}


String ParenFilenameLiteral() #void :
{String fn;}
{
  ( ( <LPAREN> fn=Filename() <RPAREN> ) | fn=Filename() ){ return fn;}
}

String ParenStringLiteral() #void :
{String str;}
{
  ( ( <LPAREN> str=StringLiteral() <RPAREN> ) | str=StringLiteral() ){ return str;} 
}

void GuidelineDef() :
{String nm;} 
{
  <GUIDELINE> ( <LPAREN> nm=ParenStringLiteral() <RPAREN> ){jjtThis.data.put("Name",nm);jjtThis.data.put("GuidelineID","1");jjtThis.data.put("Version","1");jjtThis.data.put("StartDate","");}   
  ( 
  	(
  		InsertPricing()
  		|
  		FunctionRef()
  		|
	   	( LOOKAHEAD(4)
	    		RulesetDef() 
	  		| 	RulesetRef()  )
	  	| 
	  	( LOOKAHEAD(5)
	    		RuleRef() 
	  		| 	RuleDef() ) 
	)+ 
  )
	
  <END> 
}


void InsertPricing() :
{}
{
	<INSERT_PRICING_GUIDELINE> <LPAREN><RPAREN> EOS()
}

String StringLiteral() #void : 
{}
{
  <STRING_LITERAL>  { return token.image.substring(1,(token.image.length()-1));}
}

String Name() #void :
{}
{
  <IDENTIFIER> {  return token.image; }
}

void FunctionRef() :
{String nm;}
{
  nm=Name(){jjtThis.data.put("Name",nm);} <LPAREN> (FunctionRefArgList() )? <RPAREN> EOS()
}


void FunctionRefArgList() :
{}
{
	FunctionRefArg() ( "," FunctionRefArg() )*
}



void FunctionRefArg() :
{ Token t; String str;}
{
  ( t=<NUMERIC_CONSTANT>
  | t=<CHARACTER_LITERAL> )	{ jjtThis.data.put("value",t.image ); }
  | str=StringLiteral()		{ jjtThis.data.put("value",str ); }
  |	str=Name()				{ jjtThis.data.put("value",str ); } 		 
}


void FunctionDef() :
{String nm, codeBlock;}
{
  nm=Name(){jjtThis.data.put("Name",nm);} <LPAREN> ( FunctionDefArgList() )? <RPAREN> 
  codeBlock=CodeBlock(){jjtThis.data.put("codeBlock", codeBlock);}
}


void FunctionDefArgList() :
{}
{
	FunctionDefArg() ("," FunctionDefArg())*
}



void FunctionDefArg() :
{Token t;}
{
	<STRING>t=<IDENTIFIER>{jjtThis.data.put("value", "$" + t.image);}
}



String CodeBlock() :
{Token t;}
{							
	t=<CODE_BLOCK> {return t.image.substring(1,(t.image.length()-1));}
}



void XmlFuncDef() :
{String nm;}
{
  <XMLFUNC> nm=Name(){jjtThis.data.put("Identifier",nm);} <LPAREN> (XmlFuncDefArgList() )? <RPAREN> EOS()
}



void XmlFuncDefArgList() :
{}
{
	XmlFuncDefArg() ( "," XmlFuncDefArg() )*
}



void XmlFuncDefArg() :
{}
{  
  (	LOOKAHEAD(2) ( <IND_IN> | <IND_OUT> )? Constant()
	| LOOKAHEAD(2) ( <IND_IN> | <IND_OUT> )? VarRef()
  )
}



void XmlFuncRef() :
{String nm;}
{
  nm=Name(){jjtThis.data.put("Identifier",nm);} <LPAREN> (XmlFuncRefArgList() )? <RPAREN>
}



void XmlFuncRefArgList() :
{}
{
	XmlFuncRefArg() ( "," XmlFuncRefArg() )*
}



void XmlFuncRefArg() :
{}
{  
  (	LOOKAHEAD(3) ( <IND_IN> | <IND_OUT> )? Constant()
	| ( <IND_IN> | <IND_OUT> )? VarRef()
  )
}



void RulesetDef() :
{String nm, et;}
{
  "ruleset" nm=Name(){jjtThis.data.put("Name",nm);jjtThis.data.put("Id","99999");jjtThis.data.put("Type","0");} <LPAREN> ( et=ExecuteType(){jjtThis.data.put("ExecuteType",et);} ) ( "," <PL> {jjtThis.data.put("Type","1");} )? <RPAREN>
  (LOOKAHEAD(5) RuleDef()
    | RuleRef() )+ 
  <END>
}



String ExecuteType() #void :
{}
{
  <TRUE>        { return new String("1");} 
  | <FALSE>     { return new String("2");} 
  | <CONTINUE>  { return new String("3");} 
}



void RulesetRef() :
{String nm;}
{
  "ruleset" nm=Name(){jjtThis.data.put("Name",nm);} <LPAREN> <RPAREN> EOS()
}



void RuleDef() :
{String nm;}
{
  "rule" nm=Name(){jjtThis.data.put("Name",nm);jjtThis.data.put("Id","99999");} <LPAREN> <RPAREN>
  ( IfThenElse() )
  <END>
}



void RuleRef() :
{String nm;}
{
  "rule" nm=Name(){jjtThis.data.put("Name",nm);} <LPAREN> <RPAREN> EOS()
}



void IfThenElse() #void :
{}
{
  "if" <LPAREN> Condition() <RPAREN>
  "then"
  IfActions()
  ( <ELSE> 
    ElseActions()
  )?
  <END>
 
}

// COMPARISON EXPRESSIONS

/*
Condition  --> CompTerm ( AND1 CompTerm | AND2 CompTerm | OR1 CompTerm | OR2 CompTerm )*
*/
void Condition() :
{}
{
  Expression()
}

/*
Expression  --> CompTerm ( AND1 CompTerm | AND2 CompTerm | OR1 CompTerm | OR2 CompTerm )*
*/
void Expression() :
{}  
{
	LogExpr()
}

void LogExpr() #LogicalCompute(>1) :
{}
{
	LogTerm() (LogicalOperator() LogTerm())*
}


void LogTerm() #void :
{}
{
	LOOKAHEAD(2)
	EqExpr()
	|
	LOOKAHEAD(BraceLookAhead())
	Brace()
	
}

void BraceLookAhead() #void :
{}
{
	<LPAREN> LogTerm() LogicalOperator()
}

void EqExpr() #EqualityCompute(>1) :
{}
{
	CompTerm() (EqualityOperator() CompTerm())*
	|
	"(" CompTerm() (EqualityOperator() CompTerm())* ")"
}



/*
Compute  --> CompTerm ( AND1 CompTerm | AND2 CompTerm | OR1 CompTerm | OR2 CompTerm )*
*/
void Compute() #LogicalCompute(3) :
{}
{
  CompTerm() (LogicalOperator() CompTerm())
}



void LogicalOperator() :
{ Token t; }
{
  t=<AND1>		{ jjtThis.data.put("value", new String("AND")); }
  | t=<AND2>	{ jjtThis.data.put("value", new String("AND")); }
  | t=<OR1>		{ jjtThis.data.put("value", new String("OR")); }
  | t=<OR2> 	{ jjtThis.data.put("value", new String("OR")); }
}



/*
CompTerm  --> Primary ( LT Primary 
            | GT Primary
            | NEQ1 Primary
            | NEQ2 Primary
            | EQU Primary
            | LEQ Primary
            | GEQ Primary)*

*/
void CompTerm() #EqualityCompute(>1) :
{}
{
  LOOKAHEAD(2)
  LhOperand() (EqualityOperator() Operand())
|
  Operand()
 
}



void EqualityOperator() :
{ Token t; }
{
  t=<LT> 		{ jjtThis.data.put("value", new String("&lt;") ); }
  | t=<GT>		{ jjtThis.data.put("value", new String("&gt;") ); }
  | t=<NEQ1>	{ jjtThis.data.put("value", new String("&lt;&gt;") ); }
  | t=<NEQ2>	{ jjtThis.data.put("value", new String("&lt;&gt;") ); }
  | t=<EQU>		{ jjtThis.data.put("value", new String("==") ); }
  | t=<LEQ>		{ jjtThis.data.put("value", new String("&lt;=") ); }
  | t=<GEQ>  	{ jjtThis.data.put("value", new String("&gt;=") ); }
  | t=<IN1>  	{ jjtThis.data.put("value", new String("??") ); }
  | t=<IN2>  	{ jjtThis.data.put("value", new String("??") ); }
}



/*
Operand   --> NUMERIC_CONSTANT
        | STRING_LITERAL
        | VarRef
        | LPAREN Compute RPAREN

*/

void LhOperand() #void :
{}
{
	VarRef()
}


void Operand() #void :
{}
{
	LOOKAHEAD(1)
	VarRef() 
    | 
    Constant()
}


void Brace() :
{}
{
	<LPAREN> LogExpr() <RPAREN>
}

void LogicalBrace() #Brace :
{}
{
  <LPAREN> Compute() <RPAREN>
}




void EqualityBrace() #void :
{}
{
  <LPAREN> CompTerm() <RPAREN>
}




void Constant() :
{ Token t; String str; }
{
	t=<NUMERIC_CONSTANT> 	{ jjtThis.data.put("value",t.image ); }
	| t=<CONST_NULL>		{ jjtThis.data.put("value","NULL" ); }
	| t=<TRUE>				{ jjtThis.data.put("value","True" ); }
	| t=<FALSE> 			{ jjtThis.data.put("value","False" ); }
  	| 
  	str=StringLiteral()  	{ jjtThis.data.put("value",str); }
}



// MATH EXPRESSIONS

/*
MathExpression  --> MathTerm ( PLUS MathTerm | MINUS MathTerm )*
*/
void MathExpression() :
{}
{
  /*MathCompute() ( PlusOperator() MathCompute() | MinusOperator() MathCompute() )*  */
  MCompute()
}


/*
MCompute  --> MathTerm ( PLUS MathTerm | MINUS MathTerm )*
*/
void MCompute() #MathCompute(>1) :
{}
{
  MathCompute() ( PlusOperator() MathCompute() | MinusOperator() MathCompute() )*  
}


/*
PlusOperator - This is here so that the tree builds correctly and the 
                operator can be retrieved.
*/
void PlusOperator() :
{ Token t; }
{
  t=<PLUS> {jjtThis.data.put("value", t.image ); }
}



/*
MinusOperator - This is here so that the tree builds correctly and the 
                operator can be retrieved.
*/
void MinusOperator() :
{ Token t; }
{
  t=<MINUS> {jjtThis.data.put("value", t.image ); }
}



/*
MathCompute    --> MTerm ( MULT MTerm | DIV MTerm )*
*/
void MathCompute() #MathCompute(>1):
{}
{
  MultTerm() ( MultOperator() MultTerm() | DivOperator() MultTerm() )*  
}


/*
MultOperator - This is here so that the tree builds correctly and the 
                operator can be retrieved.
*/
void MultOperator() :
{ Token t; }
{
  t=<MULT> {jjtThis.data.put("value", t.image ); }
}



/*
DivOperator - This is here so that the tree builds correctly and the 
                operator can be retrieved.
*/
void DivOperator() :
{ Token t; }
{
  t=<DIV> {jjtThis.data.put("value", t.image ); }
}



/*
MultTerm     --> MathOperand ( RAISETO MathOperand )*
*/
void MultTerm() #MathCompute(>1) :
{}
{
  MathOperand() ( RaiseToOperator() MathOperand() )*   
}


/*
RaiseToOperator - This is here so that the tree builds correctly and the 
                operator can be retrieved.
*/
void RaiseToOperator() :
{ Token t; }
{
  t=<RAISETO> {jjtThis.data.put("value", t.image ); }
}



/*
MathOperand   --> NUMERIC_CONSTANT
          | LPAREN MathExpression RPAREN
          | MINUS MathOperand
          

*/
void MathOperand() #void :
{}
{
//  ( <INTEGER_LITERAL> | <FLOATING_POINT_LITERAL> )
//  <NUMERIC_CONSTANT>
  MathConstant()
  | VarRef()
  | MathBrace()
  | ( <MINUS>  MathOperand() )
}



void MathBrace() #Brace :
{}
{
//  ( <LPAREN> MathExpression() <RPAREN> )
  ( <LPAREN> MCompute() <RPAREN> )
}




void MathConstant() :
{ Token t; }
{
  t=<NUMERIC_CONSTANT> { jjtThis.data.put("value", t.image ); }
}



void IfActions() :
{}
{
  ( 
    Assign() 
  | Message()
  | ( LOOKAHEAD(4)
		ConditionMsgDef() 
	| 	ConditionMsgRef()  )
  )* 
}

void ElseActions() :
{}
{
  ( 
    Assign() 
  | Message() 
  | ( LOOKAHEAD(4)
		ConditionMsgDef() 
	| 	ConditionMsgRef()  )
  )* 
}

void Assign() :
{}
{
  AssignTo() <ASSIGN> AssignValue() EOS()
}


void AssignTo() :
{}
{
  VarRef()
}


void AssignValue() :
{}
{
  (LOOKAHEAD(2) XmlFuncRef()
	| (LOOKAHEAD(2) MathExpression()
		| ConstantExpression()
		| LookupDef() )
  )
}


void ConstantExpression() #Expression :
{}
{
  Constant()
}



void LookupDef() :
{String nm;}
{
  "lookup" <LPAREN> nm=StringLiteral(){jjtThis.data.put("Name",nm);jjtThis.data.put("Id","1");} "," VarRef() "," VarRef() <RPAREN>
}



void Message() :
{ String msg;}
{
  "message" <LPAREN> MessageType() "," msg=StringLiteral(){jjtThis.data.put("value",msg);} <RPAREN> EOS()
}

void MessageType() :
{ Token t; }
{
  ( t=<MSG_FINDINGS> | t=<MSG_OBSERVATION> | t=<MSG_CREDIT> | t=<MSG_EXC> ) { jjtThis.data.put("value", t.image); }
}

void ConditionMsgRef() :
{String id;}
{
  "condition" id=Name(){jjtThis.data.put("Identifier",id);} <LPAREN> <RPAREN> EOS()
}

void ConditionMsgDef() :
{ String id; String nm; String idt; String msg;}
{
  "condition" id=Name(){jjtThis.data.put("Identifier",id);} <LPAREN> nm=StringLiteral(){jjtThis.data.put("Name",nm);} "," CondType() "," PriorTo() "," idt=StringLiteral(){jjtThis.data.put("ImageDocType",idt);} "," msg=StringLiteral(){jjtThis.data.put("value",msg);} <RPAREN> EOS()
}



void CondType() :
{ Token t;}
{
  ( t=<CONDTYPE_ASSET> | t=<MSG_CREDIT> | t=<CONDTYPE_INCOME> | t=<CONDTYPE_PROPERTY> | t=<CONDTYPE_PURCHASE> | t=<CONDTYPE_TITLE> ) { jjtThis.data.put("value", t.image); }
}


void PriorTo() :
{ Token t; }
{
  ( t=<CONDPRIORTO_DOCS> | t=<CONDPRIORTO_FUNDING> | t=<CONDPRIORTO_APPROVAL> ) { jjtThis.data.put("value", t.image); }
}


void VarRef() :
{String nm;}
{
  <CAST_DPM> <LPAREN> nm=Name() <RPAREN> 	{jjtThis.data.put("Name",nm);jjtThis.data.put("cast","dpm");}
  | <CAST_PPM> <LPAREN> nm=Name() <RPAREN> 	{jjtThis.data.put("Name",nm);jjtThis.data.put("cast","ppm");}
  | nm=Name()								{jjtThis.data.put("Name",nm);}
//  ( VarCast() )? <IDENTIFIER>
}

void VarCast() :
{}
{
  <LPAREN> VariableType() <RPAREN>
}


void VariableType() :
{}
{
  ( <DPM> | <DSM> | <PPM> )
}


void AndOperator() :
{}
{
  <AND1>
| <AND2> 
}

void OrOperator() :
{}
{
  <OR1> 
| <OR2> 
}

/* Example Rules/sets

rule G-TestRule ()
  if ( Loan_Amount == Loan_Amount )
  then
    Rate_1st = Rate_1st + Rate_Adj-Total
    Rate = Rate_1st
  else
    Rate_1st = 0
    Rate = 0
  end
end

rule G-TestRule2 ()
  if ( Loan_Amount_1st > 100000 &&
        ( Loan_Amount_1st < 200000 ||
          Loan_Amount_1st == 1 
        )
     )
  then
    Rate = Rate_1st
  end
end

ruleset CoolRuleset(true,0)

  rule G-TestRule3 ()
    if ( Loan_Amount == Loan_Amount )
    then
      Rate_1st = Rate_1st + Rate_Adj-Total; Rate = Rate_1st
    end
  end
  
  rule G-TestRule4 ()
    if ( Loan_Amount_1st > 100000 &&
          ( (Loan_Amount_1st < 200000) ||
            Loan_Amount_1st == 1 
          )
       )
    then
      Rate = Rate_1st;
    end
  end

end

*/