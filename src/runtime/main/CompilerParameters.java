/**
 * 
 */
package runtime.main;

import java.util.ArrayList;

/**
 * @author killer
 *
 */
public class CompilerParameters extends CommandLineParameters {
	public 	String 				inFile 	= new String("");
	public 	String 				outFile	= new String("");

	public 	ArrayList<String>	incDirs		= new ArrayList<String>();
	
	public 	boolean 			verbose			= false;	// Verbosity is off by default.
	public 	boolean 			verboseParse	= false;	// Parse verbosity is off by default.
	public 	boolean 			raw				= false;	// Raw output is off by default.
	public 	boolean 			generateOutput	= true;		// XML output is generated by default.

			boolean 			isValid		= true;		// Assume parameters are valid.
			
	@Override
	public void usage(){
		System.out.println();
		System.out.println("======================================================================");
		System.out.println("GDLC GuideLine Compiler");
		System.out.println("Usage:  GDLC inFile [outFile] [-switch]* [/I]* ");
		System.out.println();
		System.out.println("	[] = optional");
		System.out.println("	*  = 0 or more, separated by spaces");
		System.out.println();
		System.out.println("	inFile    name of file to compile.");
		System.out.println("	outFile   name of XML output file. (default is guideline name)");
		System.out.println();
		System.out.println("   --switches--");
		System.out.println("	-h, -help     show usage instructions.");
		System.out.println("	-no,-nooutput do not generate output.");
		System.out.println("	-r, -raw      force output of all rules/sets/lookups.");
		System.out.println("	              outFile is a required parameter when -raw is used.");
		System.out.println("	-v, -verbose  show all status messages.");
		System.out.println("	-vp,          show parse tree.");
		System.out.println();
		System.out.println("   --parameters--");
		System.out.println("	/Ipath        path to include dir.");
		System.out.println();
		System.out.println("======================================================================");
		System.out.println();
	}
	
	public boolean isValid(){ return this.isValid;}
	
	@Override
	protected void processSwitches(){
		for( String sw : this.switches){
			// Right now, only -h is a valid switch.
			if(sw.equalsIgnoreCase("h") || sw.equalsIgnoreCase("help")){
				this.usage();
				continue;
			}

			if(sw.equalsIgnoreCase("no") || sw.equalsIgnoreCase("nooutput")){
				this.generateOutput = false;
				if(this.verbose){
					Log.info("Generate output: off");
				}
				continue;
			}

			if(sw.equalsIgnoreCase("v") || sw.equalsIgnoreCase("verbose")){
				this.verbose = true;
				if(this.verbose){
					Log.info("Verbosity: on");
				}
				continue;
			}

			if(sw.equalsIgnoreCase("vp")){
				this.verboseParse = true;
				if(this.verbose){
					Log.info("Verbose parsing: on");
				}
				continue;
			}

			if(sw.equalsIgnoreCase("r") || sw.equalsIgnoreCase("raw")){
				this.raw = true;
				if(this.verbose){
					Log.info("Raw output: on");
				}
				continue;
			}

			Log.error("PARAMETER ERROR: Unknown switch [" + sw + "].");
			this.isValid = false;
			continue;
		}
		
	}
	
	@Override
	protected void processParameters(){
		// Add the current dir as a default...
		this.incDirs.add(".");
		
		for( String param : this.parameters){
											// Right now, only /I is a valid parameter.
			if(!param.startsWith("I")){
				Log.error("PARAMETER ERROR: Unknown parameter [" + param + "].");
				this.isValid = false;
				continue;
			}
			
			this.incDirs.add(param.substring(1)); 
		}
		
	}
	
	@Override
	protected void processArgs(){
		for( String arg : this.args){
			if(this.inFile.length() > 0){
				if(this.outFile.length() > 0){
					Log.error("PARAMETER ERROR: Only one inFile and one outFile parameter allowed.");
					this.isValid = false;
					this.usage();
					return;
				}
									// inFile is already set, set outFile.
				this.outFile = arg;
				if(this.verbose){
					Log.info("Setting outFile: [" + this.outFile + "]");
				}
				continue;
			}
									// inFile has not been set yet, set it.
			this.inFile = arg;
			if(this.verbose){
				Log.info("Setting inFile: [" + this.inFile + "]");
			}
			continue;
		}
	}
	
	@Override
	protected void validate(){
		if (this.inFile.length() == 0) {
			Log.error("PARAMETER ERROR: Missing inFile parameter.");
			this.usage();
			this.isValid = false;
			return;
		}
		
		if (this.raw == true && this.outFile.length() == 0) {
			Log.error("PARAMETER ERROR: outFile is a required parameter when -raw is in use.");
			this.usage();
			this.isValid = false;
			return;
		}
		
	}
	

}
