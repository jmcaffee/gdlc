/* Generated By:JJTree&JavaCC: Do not edit this line. GdlParserTokenManager.java */
package runtime.parser;
import runtime.main.Log;
import runtime.visitors.DataVisitor;

public class GdlParserTokenManager implements GdlParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x20L) != 0L)
            return 101;
         if ((active0 & 0x2010000000000L) != 0L)
         {
            jjmatchedKind = 91;
            return 11;
         }
         if ((active1 & 0x200L) != 0L)
            return 102;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 103;
         if ((active0 & 0x57ee6ffdfff80L) != 0L || (active1 & 0x2800040L) != 0L)
         {
            jjmatchedKind = 91;
            return 25;
         }
         if ((active0 & 0x800100200000L) != 0L)
         {
            jjmatchedKind = 91;
            return 2;
         }
         if ((active1 & 0x800L) != 0L)
            return 104;
         if ((active1 & 0x100L) != 0L)
            return 84;
         if ((active1 & 0x2000L) != 0L)
            return 27;
         return -1;
      case 1:
         if ((active0 & 0x7ffe77fffff80L) != 0L || (active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 1;
            return 25;
         }
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x2000040L) != 0L)
            return 25;
         return -1;
      case 2:
         if ((active0 & 0x4000401c01c00L) != 0L || (active1 & 0x800000L) != 0L)
            return 25;
         if ((active0 & 0x3ffe37e3fe380L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 2;
            }
            return 25;
         }
         return -1;
      case 3:
         if ((active0 & 0x1000318220000L) != 0L)
            return 25;
         if ((active0 & 0x6ffe0661de380L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return 25;
         }
         return -1;
      case 4:
         if ((active0 & 0x677606e19e300L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 4;
            }
            return 25;
         }
         if ((active0 & 0x888000040080L) != 0L)
            return 25;
         return -1;
      case 5:
         if ((active0 & 0x663606e19c100L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
            return 25;
         }
         if ((active0 & 0x148000002200L) != 0L)
            return 25;
         return -1;
      case 6:
         if ((active0 & 0x2000028090100L) != 0L)
            return 25;
         if ((active0 & 0x463604610c000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 6;
            return 25;
         }
         return -1;
      case 7:
         if ((active0 & 0x24046104000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 7;
            return 25;
         }
         if ((active0 & 0x4612000008000L) != 0L)
            return 25;
         return -1;
      case 8:
         if ((active0 & 0x20004104000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 8;
            return 25;
         }
         if ((active0 & 0x4042000000L) != 0L)
            return 25;
         return -1;
      case 9:
         if ((active0 & 0x100000L) != 0L)
            return 25;
         if ((active0 & 0x20004004000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 9;
            return 25;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 10;
            return 25;
         }
         if ((active0 & 0x20000004000L) != 0L)
            return 25;
         return -1;
      case 11:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 11;
            return 25;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 12;
            return 25;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 13;
            return 25;
         }
         return -1;
      case 14:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 14;
            return 25;
         }
         return -1;
      case 15:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 15;
            return 25;
         }
         return -1;
      case 16:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 16;
            return 25;
         }
         return -1;
      case 17:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 17;
            return 25;
         }
         return -1;
      case 18:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 18;
            return 25;
         }
         return -1;
      case 19:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 19;
            return 25;
         }
         return -1;
      case 20:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 20;
            return 25;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 34:
         return jjStartNfaWithStates_0(0, 73, 102);
      case 36:
         return jjStopAtPos(0, 90);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 39:
         return jjStartNfaWithStates_0(0, 72, 84);
      case 40:
         return jjStopAtPos(0, 61);
      case 41:
         return jjStopAtPos(0, 62);
      case 42:
         return jjStopAtPos(0, 76);
      case 43:
         return jjStopAtPos(0, 74);
      case 44:
         return jjStopAtPos(0, 68);
      case 45:
         return jjStartNfaWithStates_0(0, 75, 104);
      case 46:
         return jjStartNfaWithStates_0(0, 69, 101);
      case 47:
         return jjStartNfaWithStates_0(0, 77, 27);
      case 59:
         return jjStopAtPos(0, 67);
      case 60:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x120000L);
      case 61:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 62:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 91:
         return jjStopAtPos(0, 65);
      case 93:
         return jjStopAtPos(0, 66);
      case 94:
         return jjStopAtPos(0, 78);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4088000400080L, 0x800000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x42040800000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000028c00L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4600000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2010000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100080000300L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20040000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x2000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x600001105000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x18000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800100200000L, 0x0L);
      case 123:
         return jjStartNfaWithStates_0(0, 63, 103);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 125:
         return jjStopAtPos(0, 64);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 61:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 62:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 76:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 70, 25);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20308000L, active1, 0L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 25);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x810000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000080L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100404000100L, active1, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1002040056000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000401400L, active1, 0L);
      case 114:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 89, 25);
         return jjMoveStringLiteralDfa2_0(active0, 0x240001800000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x88000000800L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x240001a080000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1104000008100L, active1, 0L);
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 25);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 25);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 25);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 25);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40100000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000080L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000L, active1, 0L);
      case 109:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 25);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 25);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 25);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2012040040000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000012000L, active1, 0L);
      case 112:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000200L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000100000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xa8224000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000020000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000100000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2050042000000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 25);
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0xac00c0c4000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000010100L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000200L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 25);
         return jjMoveStringLiteralDfa5_0(active0, 0x200002110000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2052040000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20004084200L);
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 25);
         return jjMoveStringLiteralDfa5_0(active0, 0x8008000L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2100L);
      case 121:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000010000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 25);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x88000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2004000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x2012000100000L);
      case 112:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 25);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 25);
         break;
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 25);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 25);
         return jjMoveStringLiteralDfa6_0(active0, 0x4044000000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x4020000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4020000000000L);
      case 99:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 25);
         break;
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 25);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 25);
         break;
      case 103:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 25);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x4042000000L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 25);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000100000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 25);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 25);
         break;
      case 108:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 25);
         break;
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 25);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4040004000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 25);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 25);
         break;
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x20004000000L);
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 25);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 20, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 25);
         break;
      case 112:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 14, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(21, 26, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 101;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 25:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(25);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 102:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  else if (curChar == 34)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  break;
               case 84:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  else if (curChar == 39)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 11:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(25);
                  break;
               case 103:
               case 22:
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddTwoStates(41, 42);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddTwoStates(39, 40);
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(6, 23);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(24, 27);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(44, 49);
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(39, 41);
                  else if (curChar == 47)
                     jjAddStates(28, 29);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(19, 20);
                  if (curChar == 48)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(30, 35);
                  }
                  break;
               case 27:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(33, 34);
                  else if (curChar == 47)
                     jjCheckNAddStates(36, 38);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 34 && kind > 59)
                     kind = 59;
                  break;
               case 26:
                  if (curChar == 47)
                     jjAddStates(28, 29);
                  break;
               case 28:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 29:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 30:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 31:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 33:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 42)
                     jjAddStates(39, 40);
                  break;
               case 35:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 34);
                  break;
               case 36:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 34);
                  break;
               case 37:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 38:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(39, 41);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(44, 49);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(3, 5);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(0, 2);
                  break;
               case 51:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(6, 23);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 48);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(62, 48);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if (curChar != 46)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(44, 46);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(44, 46);
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(68, 48);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar != 46)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(47, 49);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(47, 49);
                  break;
               case 73:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(74, 53);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 77:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(78, 53);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 81:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(82);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(82, 53);
                  break;
               case 83:
                  if (curChar == 39)
                     jjCheckNAddStates(24, 27);
                  break;
               case 85:
                  if (curChar == 39 && kind > 58)
                     kind = 58;
                  break;
               case 87:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 88:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(89, 85);
                  break;
               case 89:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 90:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(89);
                  break;
               case 92:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 93:
                  if (curChar == 39 && kind > 59)
                     kind = 59;
                  break;
               case 94:
                  if (curChar != 48)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(30, 35);
                  break;
               case 95:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(95, 40);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(97, 40);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(99, 42);
                  break;
               case 100:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(100, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(25);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 102:
               case 19:
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 84:
                  jjCheckNAddTwoStates(92, 93);
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(85);
                  else if (curChar == 92)
                     jjAddStates(53, 55);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(25);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 103:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  else if (curChar == 125)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(25);
                  }
                  else if (curChar == 123)
                     jjCheckNAddTwoStates(22, 23);
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 101 && kind > 35)
                     kind = 35;
                  break;
               case 1:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 69 && kind > 35)
                     kind = 35;
                  break;
               case 5:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 101 && kind > 36)
                     kind = 36;
                  break;
               case 9:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 69 && kind > 36)
                     kind = 36;
                  break;
               case 14:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 21:
                  if (curChar == 123)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 125 && kind > 60)
                     kind = 60;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(25);
                  break;
               case 28:
                  jjAddStates(36, 38);
                  break;
               case 33:
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
               case 36:
                  jjCheckNAddTwoStates(36, 34);
                  break;
               case 40:
                  if ((0x100000001000L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 42:
                  if ((0x100000001000L & l) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 48:
                  if ((0x5000000050L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 53:
                  if ((0x5000000050L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 60:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(62, 63);
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 72:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(66, 67);
                  break;
               case 76:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 80:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 86:
                  if (curChar == 92)
                     jjAddStates(53, 55);
                  break;
               case 87:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 92:
                  jjCheckNAddTwoStates(92, 93);
                  break;
               case 96:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(97);
                  break;
               case 97:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(97, 40);
                  break;
               case 98:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(99, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 102:
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 84:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 103:
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(36, 38);
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(36, 34);
                  break;
               case 92:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 101 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   49, 50, 53, 44, 45, 48, 39, 40, 55, 56, 48, 59, 60, 63, 64, 41, 
   42, 69, 70, 75, 76, 79, 80, 53, 84, 86, 92, 93, 27, 32, 95, 40, 
   96, 98, 100, 42, 28, 29, 31, 35, 37, 55, 56, 48, 65, 66, 48, 71, 
   72, 53, 79, 80, 53, 87, 88, 90, 46, 47, 51, 52, 57, 58, 61, 62, 
   67, 68, 73, 74, 77, 78, 81, 82, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\141\154\151\141\163", 
"\151\156\143\154\165\144\145", "\151\155\160\157\162\164", "\144\160\155", "\144\163\155", "\160\160\155", 
"\154\157\157\153\165\160", "\160\157\167\145\162\154\157\157\153\165\160", null, 
"\142\157\157\154\145\141\156", "\144\141\164\145", "\155\157\156\145\171", "\156\165\155\145\162\151\143", 
"\160\145\162\143\145\156\164\141\147\145", "\164\145\170\164", "\141\160\160", "\143\162\144", "\160\162\144", 
"\147\165\151\144\145\154\151\156\145", 
"\111\156\163\145\162\164\120\162\151\143\151\156\147\107\165\151\144\145\154\151\156\145", "\162\165\154\145\163\145\164", "\162\165\154\145", 
"\155\145\163\163\141\147\145", "\143\157\156\144\151\164\151\157\156", "\151\146", "\164\150\145\156", 
"\145\154\163\145", "\145\156\144", null, null, "\143\157\156\164\151\156\165\145", 
"\145\170\143\145\160\164\151\157\156", "\141\163\163\145\164\163", "\146\151\156\144\151\156\147\163", 
"\157\142\163\145\162\166\141\164\151\157\156", "\143\162\145\144\151\164", "\141\163\163\145\164", 
"\151\156\143\157\155\145", "\160\162\157\160\145\162\164\171", "\160\165\162\143\150\141\163\145", 
"\164\151\164\154\145", "\144\157\143\163", "\146\165\156\144\151\156\147", 
"\141\160\160\162\157\166\141\154", null, null, null, null, null, null, null, null, null, null, "\50", "\51", 
"\173", "\175", "\133", "\135", "\73", "\54", "\56", "\120\114", "\75", "\47", "\42", 
"\53", "\55", "\52", "\57", "\136", "\75\75", "\41\75", "\74\76", "\74", "\76", 
"\74\75", "\76\75", "\46\46", "\141\156\144", "\174\174", "\157\162", "\44", null, null, 
null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfd1fffffffff7f81L, 0xfffffffL, 
};
static final long[] jjtoSkip = {
   0x807eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x8000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[101];
private final int[] jjstateSet = new int[202];
protected char curChar;
public GdlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public GdlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 101; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
