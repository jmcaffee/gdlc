/* Generated By:JJTree&JavaCC: Do not edit this line. GdlParserTokenManager.java */
package runtime.parser;
import runtime.parser.DumpVisitor;

public class GdlParserTokenManager implements GdlParserConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000000000L) != 0L)
            return 97;
         if ((active0 & 0x4020000L) != 0L)
         {
            jjmatchedKind = 76;
            return 2;
         }
         if ((active0 & 0x100001b9bfdffe0L) != 0L || (active1 & 0xa00L) != 0L)
         {
            jjmatchedKind = 76;
            return 28;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 98;
         if ((active0 & 0x400000000000000L) != 0L)
            return 19;
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 76;
            return 11;
         }
         return -1;
      case 1:
         if ((active0 & 0x100000002000000L) != 0L || (active1 & 0x800L) != 0L)
            return 28;
         if ((active0 & 0x1f9dffffe0L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
            return 28;
         }
         return -1;
      case 2:
         if ((active0 & 0x101c0700L) != 0L || (active1 & 0x200L) != 0L)
            return 28;
         if ((active0 & 0x1f8de3f8e0L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 2;
            return 28;
         }
         return -1;
      case 3:
         if ((active0 & 0xcc22000L) != 0L)
            return 28;
         if ((active0 & 0x1f8121d8e0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 3;
            }
            return 28;
         }
         return -1;
      case 4:
         if ((active0 & 0x4020L) != 0L)
            return 28;
         if ((active0 & 0x1f816198c0L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
            return 28;
         }
         return -1;
      case 5:
         if ((active0 & 0x1200000080L) != 0L)
            return 28;
         if ((active0 & 0xd81619840L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
            return 28;
         }
         return -1;
      case 6:
         if ((active0 & 0x1409040L) != 0L)
            return 28;
         if ((active0 & 0xd80210800L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
            return 28;
         }
         return -1;
      case 7:
         if ((active0 & 0x900210000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 7;
            return 28;
         }
         if ((active0 & 0x480000800L) != 0L)
            return 28;
         return -1;
      case 8:
         if ((active0 & 0x100200000L) != 0L)
            return 28;
         if ((active0 & 0x800010000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 8;
            return 28;
         }
         return -1;
      case 9:
         if ((active0 & 0x10000L) != 0L)
            return 28;
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 9;
            return 28;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 34:
         return jjStartNfaWithStates_0(0, 59, 97);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 39:
         return jjStartNfaWithStates_0(0, 58, 19);
      case 40:
         return jjStopAtPos(0, 47);
      case 41:
         return jjStopAtPos(0, 48);
      case 42:
         return jjStopAtPos(0, 62);
      case 43:
         return jjStopAtPos(0, 60);
      case 44:
         return jjStopAtPos(0, 54);
      case 45:
         return jjStopAtPos(0, 61);
      case 46:
         return jjStartNfaWithStates_0(0, 55, 98);
      case 47:
         return jjStopAtPos(0, 63);
      case 59:
         return jjStopAtPos(0, 53);
      case 60:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x48L);
      case 61:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 62:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 51);
      case 93:
         return jjStopAtPos(0, 52);
      case 94:
         return jjStopAtPos(0, 64);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200040020L, 0x200L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1080080000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2b00L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x118000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000c0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1004000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x110400L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xc00000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4020000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 49);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 125:
         return jjStopAtPos(0, 50);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 61:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 62:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 76:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 28);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1030800L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 28);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000020L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000040L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80005000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40500L, active1, 0L);
      case 114:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 75, 28);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000180000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xe08000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 124:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000840L, active1, 0L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 28);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 28);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 28);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 28);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1004000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200020L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000L, active1, 0L);
      case 109:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 28);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 28);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x480004000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 112:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xa09000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1400200000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 28);
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0xb0040c000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1040L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 28);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x211000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1480000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x800008080L);
      case 115:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x400800L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8800L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x480010000L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 28);
         break;
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 28);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 99:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 28);
         break;
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 28);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 28);
         break;
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100200000L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 28);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 28);
         break;
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 28);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 21, 28);
         break;
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 16, 28);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 35, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 97;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 97:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 34)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 34)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddStates(6, 8);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(9, 11);
                  }
                  break;
               case 19:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 11:
               case 28:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(28);
                  break;
               case 2:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(28);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(12, 29);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(30, 35);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 35);
                  else if (curChar == 39)
                     jjAddStates(36, 37);
                  if (curChar == 48)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(38, 43);
                  }
                  break;
               case 18:
                  if (curChar == 39)
                     jjAddStates(36, 37);
                  break;
               case 20:
                  if (curChar == 39 && kind > 44)
                     kind = 44;
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 20);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 29:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(30, 35);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(9, 11);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(6, 8);
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(12, 29);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(44, 46);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 34);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(50, 34);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar != 46)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(47, 49);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(47, 49);
                  break;
               case 55:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(56, 34);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if (curChar != 46)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(50, 52);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(50, 52);
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(64, 39);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(68, 39);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 71:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 39);
                  break;
               case 73:
                  if (curChar == 34)
                     jjCheckNAddStates(30, 35);
                  break;
               case 74:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 76:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 77:
                  if (curChar == 34 && kind > 45)
                     kind = 45;
                  break;
               case 78:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 59);
                  break;
               case 79:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 80:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 82:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 84:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 85:
                  if (curChar == 34 && kind > 46)
                     kind = 46;
                  break;
               case 86:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 87:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 88:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 90:
                  if (curChar != 48)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(38, 43);
                  break;
               case 91:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(91, 42);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(93, 42);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddTwoStates(95, 58);
                  break;
               case 96:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddTwoStates(96, 58);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 97:
                  jjCheckNAddStates(0, 2);
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 92)
                     jjAddStates(64, 66);
                  if (curChar == 92)
                     jjAddStates(67, 69);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(20);
                  else if (curChar == 92)
                     jjAddStates(70, 72);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(28);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(28);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(28);
                  }
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 101 && kind > 29)
                     kind = 29;
                  break;
               case 1:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 69 && kind > 29)
                     kind = 29;
                  break;
               case 5:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 101 && kind > 30)
                     kind = 30;
                  break;
               case 9:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 69 && kind > 30)
                     kind = 30;
                  break;
               case 14:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(70, 72);
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(28);
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 34:
                  if ((0x5000000050L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(75, 76);
                  break;
               case 39:
                  if ((0x5000000050L & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 42:
                  if ((0x100000001000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(79, 80);
                  break;
               case 54:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 58:
                  if ((0x100000001000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               case 70:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(87, 88);
                  break;
               case 74:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 75:
                  if (curChar == 92)
                     jjAddStates(67, 69);
                  break;
               case 76:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 82:
                  jjCheckNAddStates(0, 2);
                  break;
               case 83:
                  if (curChar == 92)
                     jjAddStates(64, 66);
                  break;
               case 84:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 92:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(93);
                  break;
               case 93:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(93, 42);
                  break;
               case 94:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(95);
                  break;
               case 95:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddTwoStates(95, 58);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 97:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 74:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 82:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 97 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   82, 83, 85, 74, 75, 77, 35, 36, 39, 30, 31, 34, 41, 42, 43, 44, 
   34, 47, 48, 51, 52, 57, 58, 59, 60, 65, 66, 69, 70, 39, 74, 75, 
   77, 82, 83, 85, 19, 21, 91, 42, 92, 94, 96, 58, 43, 44, 34, 53, 
   54, 34, 61, 62, 39, 69, 70, 39, 74, 75, 79, 77, 82, 83, 87, 85, 
   84, 86, 88, 76, 78, 80, 22, 23, 25, 32, 33, 37, 38, 45, 46, 49, 
   50, 55, 56, 63, 64, 67, 68, 71, 72, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\141\154\151\141\163", 
"\151\156\143\154\165\144\145", "\151\155\160\157\162\164", "\144\160\155", "\144\163\155", "\160\160\155", 
null, "\142\157\157\154\145\141\156", "\144\141\164\145", "\155\157\156\145\171", 
"\156\165\155\145\162\151\143", "\160\145\162\143\145\156\164\141\147\145", "\164\145\170\164", 
"\141\160\160", "\143\162\144", "\160\162\144", "\147\165\151\144\145\154\151\156\145", 
"\162\165\154\145\163\145\164", "\162\165\154\145", "\155\145\163\163\141\147\145", "\151\146", 
"\164\150\145\156", "\145\154\163\145", "\145\156\144", null, null, 
"\143\157\156\164\151\156\165\145", "\145\170\143\145\160\164\151\157\156", "\141\163\163\145\164\163", 
"\146\151\156\144\151\156\147\163", "\157\142\163\145\162\166\141\164\151\157\156", "\143\162\145\144\151\164", 
null, null, null, null, null, null, null, null, null, null, "\50", "\51", "\173", 
"\175", "\133", "\135", "\73", "\54", "\56", "\120\114", "\75", "\47", "\42", "\53", 
"\55", "\52", "\57", "\136", "\75\75", "\41\75", "\74\76", "\74", "\76", "\74\75", 
"\76\75", "\46\46", "\141\156\144", "\174\174", "\157\162", null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffff47ffffff7e1L, 0x1fffL, 
};
static final long[] jjtoSkip = {
   0x81eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x800L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[97];
static private final int[] jjstateSet = new int[194];
static protected char curChar;
public GdlParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public GdlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 97; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
