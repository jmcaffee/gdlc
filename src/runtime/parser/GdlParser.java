/* Generated By:JJTree&JavaCC: Do not edit this line. GdlParser.java */
package runtime.parser;

import runtime.main.Log;
import runtime.visitors.DataVisitor;

@SuppressWarnings("unchecked")
public class GdlParser/*@bgen(jjtree)*/implements GdlParserTreeConstants, GdlParserConstants {/*@bgen(jjtree)*/
  protected JJTGdlParserState jjtree = new JJTGdlParserState();
  public static void main(String args[]) {
    GdlParser parser;
    if (args.length == 0) {
      Log.status("Guideline Parser :  Reading from standard input . . .");
      parser = new GdlParser(System.in);
    } else if (args.length == 1) {
      Log.status("Guideline Parser :  Reading from file " + args[0] + " . . .");
      try {
        parser = new GdlParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        Log.error("Guideline Parser :  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Guideline Parser :  Usage is one of:");
      System.out.println("         java GdlParser < inputfile");
      System.out.println("OR");
      System.out.println("         java GdlParser inputfile");
      return;
    }
    try {
      ASTCompilationUnit cu = parser.CompilationUnit();
      Log.status("Guideline Parser :  Guideline parsed successfully.");
        dump(cu);
    } catch (ParseException e) {
      Log.error("Guideline Parser :  Encountered errors during parse.");
      Log.error(e.toString());
    }
  }

  public void dump() {
        ((SimpleNode)jjtree.rootNode()).dump(">");

  }

  public static void dump(ASTCompilationUnit cu) {
        DataVisitor v=new DataVisitor();

        System.out.println(cu.jjtAccept(v,null));
    }

/* CompilationUnit */
  final public ASTCompilationUnit CompilationUnit() throws ParseException {
 /*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALIAS:
        case INCLUDE:
        case IMPORT:
        case DPM:
        case PPM:
        case LOOKUP:
        case RULESET:
        case RULE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DPM:
        case PPM:
          VarDef();
          break;
        case LOOKUP:
          LookupDef();
          EOS();
          break;
        case ALIAS:
          Alias();
          break;
        case IMPORT:
          Import();
          break;
        case INCLUDE:
          Include();
          break;
        default:
          jj_la1[1] = jj_gen;
          if (jj_2_1(3)) {
            FunctionDef();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              FunctionRef();
              break;
            case RULE:
              RuleDef();
              break;
            case RULESET:
              RulesetDef();
              break;
            default:
              jj_la1[2] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GUIDELINE:
        GuidelineDef();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void VarDef() throws ParseException {
 /*@bgen(jjtree) VarDef */
        ASTVarDef jjtn000 = new ASTVarDef(JJTVARDEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String nm,dtyp,typ,als;
        Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DPM:
        t = jj_consume_token(DPM);
        typ = VarType();
                        jjtn000.data.put("ProductType",typ);
                        if( null != t.specialToken ){
                                jjtn000.data.put("Type","DSM");
                        } else {
                                jjtn000.data.put("Type","DPM");
                        }
                        jjtn000.data.put("varType","DPM");
        nm = Name();
                        jjtn000.data.put("Name",nm);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
          als = AliasOf();
                               jjtn000.data.put("Alias",als);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        EOS();
        break;
      case PPM:
        jj_consume_token(PPM);
        dtyp = VarDataType();
                        jjtn000.data.put("DataType",dtyp);
        typ = PpmVarType();
                        jjtn000.data.put("Type",typ);
                        jjtn000.data.put("varType","PPM");
        nm = Name();
                        jjtn000.data.put("Name",nm);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
          als = AliasOf();
                               jjtn000.data.put("Alias",als);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        EOS();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String VarType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                    {if (true) return new String("1");}
      break;
    case DATE:
      jj_consume_token(DATE);
                    {if (true) return new String("2");}
      break;
    case MONEY:
      jj_consume_token(MONEY);
                    {if (true) return new String("3");}
      break;
    case NUMERIC:
      jj_consume_token(NUMERIC);
                    {if (true) return new String("4");}
      break;
    case PERCENTAGE:
      jj_consume_token(PERCENTAGE);
                    {if (true) return new String("5");}
      break;
    case TEXT:
      jj_consume_token(TEXT);
                    {if (true) return new String("6");}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String VarDataType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                    {if (true) return new String("Boolean");}
      break;
    case DATE:
      jj_consume_token(DATE);
                    {if (true) return new String("Date");}
      break;
    case MONEY:
      jj_consume_token(MONEY);
                    {if (true) return new String("Money");}
      break;
    case NUMERIC:
      jj_consume_token(NUMERIC);
                    {if (true) return new String("Numeric");}
      break;
    case PERCENTAGE:
      jj_consume_token(PERCENTAGE);
                    {if (true) return new String("Percentage");}
      break;
    case TEXT:
      jj_consume_token(TEXT);
                    {if (true) return new String("Text");}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String PpmVarType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APPLICATION:
      jj_consume_token(APPLICATION);
                          {if (true) return new String("APM");}
      break;
    case CREDIT:
      jj_consume_token(CREDIT);
                          {if (true) return new String("CRD");}
      break;
    case PRODUCT:
      jj_consume_token(PRODUCT);
                          {if (true) return new String("PRD");}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void Alias() throws ParseException {
 /*@bgen(jjtree) Alias */
 ASTAlias jjtn000 = new ASTAlias(JJTALIAS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String nm, alsTyp, als;
    try {
      jj_consume_token(ALIAS);
      jj_consume_token(LPAREN);
      alsTyp = AliasType();
                                      jjtn000.data.put("AliasType",alsTyp);
      jj_consume_token(COMMA);
      nm = Name();
                                                                                           jjtn000.data.put("Name",nm);
      jj_consume_token(COMMA);
      als = AliasOf();
                                                                                                                                           jjtn000.data.put("Alias",als);
      jj_consume_token(RPAREN);
      EOS();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String AliasType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RULE:
      jj_consume_token(RULE);
      break;
    case RULESET:
      jj_consume_token(RULESET);
      break;
    case LOOKUP:
      jj_consume_token(LOOKUP);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                   {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public String AliasOf() throws ParseException {
  String str;
    str = StringLiteral();
                      {if (true) return str;}
    throw new Error("Missing return statement in function");
  }

  final public void EOS() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public void Import() throws ParseException {
 /*@bgen(jjtree) Import */
 ASTImport jjtn000 = new ASTImport(JJTIMPORT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String it,fn;
    try {
      jj_consume_token(IMPORT);
      jj_consume_token(LPAREN);
      it = ImportType();
                                     jjtn000.data.put("importType",it);
      jj_consume_token(COMMA);
      fn = Filename();
                                                                                             jjtn000.data.put("filename",fn);
      jj_consume_token(RPAREN);
      EOS();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String Filename() throws ParseException {
 String str;
    str = StringLiteral();
                        {if (true) return str;}
    throw new Error("Missing return statement in function");
  }

  final public String ImportType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DPM:
      jj_consume_token(DPM);
      break;
    case PPM:
      jj_consume_token(PPM);
      break;
    case LOOKUP:
      jj_consume_token(LOOKUP);
      break;
    case POWERLOOKUP:
      jj_consume_token(POWERLOOKUP);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public void Include() throws ParseException {
 /*@bgen(jjtree) Include */
 ASTInclude jjtn000 = new ASTInclude(JJTINCLUDE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String fn;
    try {
      jj_consume_token(INCLUDE);
      fn = ParenFilenameLiteral();
                                      jjtn000.data.put("filename",fn);
      EOS();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String ParenFilenameLiteral() throws ParseException {
 String fn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      fn = Filename();
      jj_consume_token(RPAREN);
      break;
    case STRING_LITERAL:
      fn = Filename();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                           {if (true) return fn;}
    throw new Error("Missing return statement in function");
  }

  final public String ParenStringLiteral() throws ParseException {
 String str;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      str = StringLiteral();
      jj_consume_token(RPAREN);
      break;
    case STRING_LITERAL:
      str = StringLiteral();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                       {if (true) return str;}
    throw new Error("Missing return statement in function");
  }

  final public void GuidelineDef() throws ParseException {
 /*@bgen(jjtree) GuidelineDef */
 ASTGuidelineDef jjtn000 = new ASTGuidelineDef(JJTGUIDELINEDEF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String nm;
    try {
      jj_consume_token(GUIDELINE);
      jj_consume_token(LPAREN);
      nm = ParenStringLiteral();
      jj_consume_token(RPAREN);
                                                            jjtn000.data.put("Name",nm);jjtn000.data.put("GuidelineID","1");jjtn000.data.put("Version","1");jjtn000.data.put("StartDate","");
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSERT_PRICING_GUIDELINE:
          InsertPricing();
          break;
        case IDENTIFIER:
          FunctionRef();
          break;
        case RULESET:
          if (jj_2_2(4)) {
            RulesetDef();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case RULESET:
              RulesetRef();
              break;
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        case RULE:
          if (jj_2_3(5)) {
            RuleRef();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case RULE:
              RuleDef();
              break;
            default:
              jj_la1[15] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSERT_PRICING_GUIDELINE:
        case RULESET:
        case RULE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InsertPricing() throws ParseException {
 /*@bgen(jjtree) InsertPricing */
  ASTInsertPricing jjtn000 = new ASTInsertPricing(JJTINSERTPRICING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INSERT_PRICING_GUIDELINE);
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      EOS();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public String StringLiteral() throws ParseException {
    jj_consume_token(STRING_LITERAL);
                      {if (true) return token.image.substring(1,(token.image.length()-1));}
    throw new Error("Missing return statement in function");
  }

  final public String Name() throws ParseException {
    jj_consume_token(IDENTIFIER);
                  {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public void FunctionRef() throws ParseException {
 /*@bgen(jjtree) FunctionRef */
 ASTFunctionRef jjtn000 = new ASTFunctionRef(JJTFUNCTIONREF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String nm;
    try {
      nm = Name();
            jjtn000.data.put("Name",nm);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERIC_CONSTANT:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        FunctionRefArgList();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      EOS();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionRefArgList() throws ParseException {
 /*@bgen(jjtree) FunctionRefArgList */
  ASTFunctionRefArgList jjtn000 = new ASTFunctionRefArgList(JJTFUNCTIONREFARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionRefArg();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        FunctionRefArg();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FunctionRefArg() throws ParseException {
 /*@bgen(jjtree) FunctionRefArg */
  ASTFunctionRefArg jjtn000 = new ASTFunctionRefArg(JJTFUNCTIONREFARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; String str;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERIC_CONSTANT:
      case CHARACTER_LITERAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERIC_CONSTANT:
          t = jj_consume_token(NUMERIC_CONSTANT);
          break;
        case CHARACTER_LITERAL:
          t = jj_consume_token(CHARACTER_LITERAL);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                              jjtn000.data.put("value",t.image );
        break;
      case STRING_LITERAL:
        str = StringLiteral();
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.data.put("value",str );
        break;
      case IDENTIFIER:
        str = Name();
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                          jjtn000.data.put("value",str );
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionDef() throws ParseException {
 /*@bgen(jjtree) FunctionDef */
 ASTFunctionDef jjtn000 = new ASTFunctionDef(JJTFUNCTIONDEF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String nm, codeBlock;
    try {
      nm = Name();
            jjtn000.data.put("Name",nm);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        FunctionDefArgList();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      codeBlock = CodeBlock();
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.data.put("codeBlock", codeBlock);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionDefArgList() throws ParseException {
 /*@bgen(jjtree) FunctionDefArgList */
  ASTFunctionDefArgList jjtn000 = new ASTFunctionDefArgList(JJTFUNCTIONDEFARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionDefArg();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        FunctionDefArg();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FunctionDefArg() throws ParseException {
 /*@bgen(jjtree) FunctionDefArg */
 ASTFunctionDefArg jjtn000 = new ASTFunctionDefArg(JJTFUNCTIONDEFARG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(STRING);
      t = jj_consume_token(IDENTIFIER);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.data.put("value", "$" + t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public String CodeBlock() throws ParseException {
 /*@bgen(jjtree) CodeBlock */
 ASTCodeBlock jjtn000 = new ASTCodeBlock(JJTCODEBLOCK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CODE_BLOCK);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        {if (true) return t.image.substring(1,(t.image.length()-1));}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void RulesetDef() throws ParseException {
 /*@bgen(jjtree) RulesetDef */
 ASTRulesetDef jjtn000 = new ASTRulesetDef(JJTRULESETDEF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String nm, et;
    try {
      jj_consume_token(RULESET);
      nm = Name();
                      jjtn000.data.put("Name",nm);jjtn000.data.put("Id","99999");jjtn000.data.put("Type","0");
      jj_consume_token(LPAREN);
      et = ExecuteType();
                                                                                                                                            jjtn000.data.put("ExecuteType",et);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(PL);
                                                                                                                                                                                               jjtn000.data.put("Type","1");
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      label_5:
      while (true) {
        if (jj_2_4(5)) {
          RuleDef();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RULE:
            RuleRef();
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RULE:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String ExecuteType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                  {if (true) return new String("1");}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  {if (true) return new String("2");}
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
                  {if (true) return new String("3");}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void RulesetRef() throws ParseException {
 /*@bgen(jjtree) RulesetRef */
 ASTRulesetRef jjtn000 = new ASTRulesetRef(JJTRULESETREF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String nm;
    try {
      jj_consume_token(RULESET);
      nm = Name();
                      jjtn000.data.put("Name",nm);
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      EOS();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RuleDef() throws ParseException {
 /*@bgen(jjtree) RuleDef */
 ASTRuleDef jjtn000 = new ASTRuleDef(JJTRULEDEF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String nm;
    try {
      jj_consume_token(RULE);
      nm = Name();
                   jjtn000.data.put("Name",nm);jjtn000.data.put("Id","99999");
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      IfThenElse();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RuleRef() throws ParseException {
 /*@bgen(jjtree) RuleRef */
 ASTRuleRef jjtn000 = new ASTRuleRef(JJTRULEREF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String nm;
    try {
      jj_consume_token(RULE);
      nm = Name();
                   jjtn000.data.put("Name",nm);
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      EOS();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IfThenElse() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Condition();
    jj_consume_token(RPAREN);
    jj_consume_token(THEN);
    IfActions();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      ElseActions();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(END);
  }

// COMPARISON EXPRESSIONS

/*
Condition  --> CompTerm ( AND1 CompTerm | AND2 CompTerm | OR1 CompTerm | OR2 CompTerm )*
*/
  final public void Condition() throws ParseException {
 /*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
Expression  --> CompTerm ( AND1 CompTerm | AND2 CompTerm | OR1 CompTerm | OR2 CompTerm )*
*/
  final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogExpr();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LogExpr() throws ParseException {
 /*@bgen(jjtree) #LogicalCompute(> 1) */
  ASTLogicalCompute jjtn000 = new ASTLogicalCompute(JJTLOGICALCOMPUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogTerm();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND1:
        case AND2:
        case OR1:
        case OR2:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_6;
        }
        LogicalOperator();
        LogTerm();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void LogTerm() throws ParseException {
    if (jj_2_5(2)) {
      EqExpr();
    } else if (jj_2_6(2147483647)) {
      Brace();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BraceLookAhead() throws ParseException {
    jj_consume_token(LPAREN);
    LogTerm();
    LogicalOperator();
  }

  final public void EqExpr() throws ParseException {
 /*@bgen(jjtree) #EqualityCompute(> 1) */
  ASTEqualityCompute jjtn000 = new ASTEqualityCompute(JJTEQUALITYCOMPUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERIC_CONSTANT:
      case STRING_LITERAL:
      case IDENTIFIER:
        CompTerm();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQU:
          case NEQ1:
          case NEQ2:
          case LT:
          case GT:
          case LEQ:
          case GEQ:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_7;
          }
          EqualityOperator();
          CompTerm();
        }
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        CompTerm();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQU:
          case NEQ1:
          case NEQ2:
          case LT:
          case GT:
          case LEQ:
          case GEQ:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_8;
          }
          EqualityOperator();
          CompTerm();
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

/*
Compute  --> CompTerm ( AND1 CompTerm | AND2 CompTerm | OR1 CompTerm | OR2 CompTerm )*
*/
  final public void Compute() throws ParseException {
 /*@bgen(jjtree) #LogicalCompute( 3) */
  ASTLogicalCompute jjtn000 = new ASTLogicalCompute(JJTLOGICALCOMPUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CompTerm();
      LogicalOperator();
      CompTerm();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  3);
    }
    }
  }

  final public void LogicalOperator() throws ParseException {
 /*@bgen(jjtree) LogicalOperator */
  ASTLogicalOperator jjtn000 = new ASTLogicalOperator(JJTLOGICALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND1:
        t = jj_consume_token(AND1);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                  jjtn000.data.put("value", new String("AND"));
        break;
      case AND2:
        t = jj_consume_token(AND2);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
               jjtn000.data.put("value", new String("AND"));
        break;
      case OR1:
        t = jj_consume_token(OR1);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                  jjtn000.data.put("value", new String("OR"));
        break;
      case OR2:
        t = jj_consume_token(OR2);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.data.put("value", new String("OR"));
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
CompTerm  --> Primary ( LT Primary 
            | GT Primary
            | NEQ1 Primary
            | NEQ2 Primary
            | EQU Primary
            | LEQ Primary
            | GEQ Primary)*

*/
  final public void CompTerm() throws ParseException {
 /*@bgen(jjtree) #EqualityCompute(> 1) */
  ASTEqualityCompute jjtn000 = new ASTEqualityCompute(JJTEQUALITYCOMPUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(2)) {
        LhOperand();
        EqualityOperator();
        Operand();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERIC_CONSTANT:
        case STRING_LITERAL:
        case IDENTIFIER:
          Operand();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void EqualityOperator() throws ParseException {
 /*@bgen(jjtree) EqualityOperator */
  ASTEqualityOperator jjtn000 = new ASTEqualityOperator(JJTEQUALITYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.data.put("value", new String("&lt;") );
        break;
      case GT:
        t = jj_consume_token(GT);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                  jjtn000.data.put("value", new String("&gt;") );
        break;
      case NEQ1:
        t = jj_consume_token(NEQ1);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
               jjtn000.data.put("value", new String("&lt;&gt;") );
        break;
      case NEQ2:
        t = jj_consume_token(NEQ2);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
               jjtn000.data.put("value", new String("&lt;&gt;") );
        break;
      case EQU:
        t = jj_consume_token(EQU);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                  jjtn000.data.put("value", new String("==") );
        break;
      case LEQ:
        t = jj_consume_token(LEQ);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                  jjtn000.data.put("value", new String("&lt;=") );
        break;
      case GEQ:
        t = jj_consume_token(GEQ);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.data.put("value", new String("&gt;=") );
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
Operand   --> NUMERIC_CONSTANT
        | STRING_LITERAL
        | VarRef
        | LPAREN Compute RPAREN

*/
  final public void LhOperand() throws ParseException {
    VarRef();
  }

  final public void Operand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      VarRef();
      break;
    case NUMERIC_CONSTANT:
    case STRING_LITERAL:
      Constant();
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Brace() throws ParseException {
 /*@bgen(jjtree) Brace */
  ASTBrace jjtn000 = new ASTBrace(JJTBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      LogExpr();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LogicalBrace() throws ParseException {
 /*@bgen(jjtree) Brace */
  ASTBrace jjtn000 = new ASTBrace(JJTBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      Compute();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EqualityBrace() throws ParseException {
    jj_consume_token(LPAREN);
    CompTerm();
    jj_consume_token(RPAREN);
  }

  final public void Constant() throws ParseException {
 /*@bgen(jjtree) Constant */
  ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; String str;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERIC_CONSTANT:
        t = jj_consume_token(NUMERIC_CONSTANT);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.data.put("value",t.image );
        break;
      case STRING_LITERAL:
        str = StringLiteral();
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.data.put("value",str);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// MATH EXPRESSIONS

/*
MathExpression  --> MathTerm ( PLUS MathTerm | MINUS MathTerm )*
*/
  final public void MathExpression() throws ParseException {
 /*@bgen(jjtree) MathExpression */
  ASTMathExpression jjtn000 = new ASTMathExpression(JJTMATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MCompute();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
MCompute  --> MathTerm ( PLUS MathTerm | MINUS MathTerm )*
*/
  final public void MCompute() throws ParseException {
 /*@bgen(jjtree) #MathCompute(> 1) */
  ASTMathCompute jjtn000 = new ASTMathCompute(JJTMATHCOMPUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MathCompute();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          PlusOperator();
          MathCompute();
          break;
        case MINUS:
          MinusOperator();
          MathCompute();
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

/*
PlusOperator - This is here so that the tree builds correctly and the 
                operator can be retrieved.
*/
  final public void PlusOperator() throws ParseException {
 /*@bgen(jjtree) PlusOperator */
  ASTPlusOperator jjtn000 = new ASTPlusOperator(JJTPLUSOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PLUS);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.data.put("value", t.image );
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
MinusOperator - This is here so that the tree builds correctly and the 
                operator can be retrieved.
*/
  final public void MinusOperator() throws ParseException {
 /*@bgen(jjtree) MinusOperator */
  ASTMinusOperator jjtn000 = new ASTMinusOperator(JJTMINUSOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MINUS);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.data.put("value", t.image );
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
MathCompute    --> MTerm ( MULT MTerm | DIV MTerm )*
*/
  final public void MathCompute() throws ParseException {
 /*@bgen(jjtree) #MathCompute(> 1) */
  ASTMathCompute jjtn000 = new ASTMathCompute(JJTMATHCOMPUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultTerm();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
        case DIV:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          MultOperator();
          MultTerm();
          break;
        case DIV:
          DivOperator();
          MultTerm();
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

/*
MultOperator - This is here so that the tree builds correctly and the 
                operator can be retrieved.
*/
  final public void MultOperator() throws ParseException {
 /*@bgen(jjtree) MultOperator */
  ASTMultOperator jjtn000 = new ASTMultOperator(JJTMULTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MULT);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.data.put("value", t.image );
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
DivOperator - This is here so that the tree builds correctly and the 
                operator can be retrieved.
*/
  final public void DivOperator() throws ParseException {
 /*@bgen(jjtree) DivOperator */
  ASTDivOperator jjtn000 = new ASTDivOperator(JJTDIVOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DIV);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.data.put("value", t.image );
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
MultTerm     --> MathOperand ( RAISETO MathOperand )*
*/
  final public void MultTerm() throws ParseException {
 /*@bgen(jjtree) #MathCompute(> 1) */
  ASTMathCompute jjtn000 = new ASTMathCompute(JJTMATHCOMPUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MathOperand();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RAISETO:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_11;
        }
        RaiseToOperator();
        MathOperand();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

/*
RaiseToOperator - This is here so that the tree builds correctly and the 
                operator can be retrieved.
*/
  final public void RaiseToOperator() throws ParseException {
 /*@bgen(jjtree) RaiseToOperator */
  ASTRaiseToOperator jjtn000 = new ASTRaiseToOperator(JJTRAISETOOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RAISETO);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.data.put("value", t.image );
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
MathOperand   --> NUMERIC_CONSTANT
          | LPAREN MathExpression RPAREN
          | MINUS MathOperand
          

*/
  final public void MathOperand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERIC_CONSTANT:
      MathConstant();
      break;
    case IDENTIFIER:
      VarRef();
      break;
    case LPAREN:
      MathBrace();
      break;
    case MINUS:
      jj_consume_token(MINUS);
      MathOperand();
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MathBrace() throws ParseException {
 /*@bgen(jjtree) Brace */
  ASTBrace jjtn000 = new ASTBrace(JJTBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      MCompute();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MathConstant() throws ParseException {
 /*@bgen(jjtree) MathConstant */
  ASTMathConstant jjtn000 = new ASTMathConstant(JJTMATHCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMERIC_CONSTANT);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.data.put("value", t.image );
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IfActions() throws ParseException {
 /*@bgen(jjtree) IfActions */
  ASTIfActions jjtn000 = new ASTIfActions(JJTIFACTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MESSAGE:
        case CONDITION:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Assign();
          break;
        case MESSAGE:
          Message();
          break;
        case CONDITION:
          ConditionMsg();
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ElseActions() throws ParseException {
 /*@bgen(jjtree) ElseActions */
  ASTElseActions jjtn000 = new ASTElseActions(JJTELSEACTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MESSAGE:
        case CONDITION:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Assign();
          break;
        case MESSAGE:
          Message();
          break;
        case CONDITION:
          ConditionMsg();
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Assign() throws ParseException {
 /*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AssignTo();
      jj_consume_token(ASSIGN);
      AssignValue();
      EOS();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AssignTo() throws ParseException {
 /*@bgen(jjtree) AssignTo */
  ASTAssignTo jjtn000 = new ASTAssignTo(JJTASSIGNTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VarRef();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AssignValue() throws ParseException {
 /*@bgen(jjtree) AssignValue */
  ASTAssignValue jjtn000 = new ASTAssignValue(JJTASSIGNVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(2)) {
        MathExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERIC_CONSTANT:
        case STRING_LITERAL:
          ConstantExpression();
          break;
        case LOOKUP:
          LookupDef();
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConstantExpression() throws ParseException {
 /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Constant();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LookupDef() throws ParseException {
 /*@bgen(jjtree) LookupDef */
 ASTLookupDef jjtn000 = new ASTLookupDef(JJTLOOKUPDEF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String nm;
    try {
      jj_consume_token(LOOKUP);
      jj_consume_token(LPAREN);
      nm = StringLiteral();
                                       jjtn000.data.put("Name",nm);jjtn000.data.put("Id","1");
      jj_consume_token(COMMA);
      VarRef();
      jj_consume_token(COMMA);
      VarRef();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Message() throws ParseException {
 /*@bgen(jjtree) Message */
  ASTMessage jjtn000 = new ASTMessage(JJTMESSAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String msg;
    try {
      jj_consume_token(MESSAGE);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MSG_EXC:
        Exptn();
        jj_consume_token(COMMA);
        ExptnType();
        break;
      case MSG_FINDINGS:
      case MSG_OBSERVATION:
      case MSG_CREDIT:
        MessageType();
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      msg = StringLiteral();
                                                                                             jjtn000.data.put("value",msg);
      jj_consume_token(RPAREN);
      EOS();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Exptn() throws ParseException {
 /*@bgen(jjtree) Exptn */
  ASTExptn jjtn000 = new ASTExptn(JJTEXPTN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MSG_EXC);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExptnType() throws ParseException {
 /*@bgen(jjtree) ExptnType */
  ASTExptnType jjtn000 = new ASTExptnType(JJTEXPTNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MSG_EXC_ASSETS:
        t = jj_consume_token(MSG_EXC_ASSETS);
        break;
      case MSG_EXC:
        t = jj_consume_token(MSG_EXC);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         jjtn000.data.put("value", t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MessageType() throws ParseException {
 /*@bgen(jjtree) MessageType */
  ASTMessageType jjtn000 = new ASTMessageType(JJTMESSAGETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MSG_FINDINGS:
        t = jj_consume_token(MSG_FINDINGS);
        break;
      case MSG_OBSERVATION:
        t = jj_consume_token(MSG_OBSERVATION);
        break;
      case MSG_CREDIT:
        t = jj_consume_token(MSG_CREDIT);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                                jjtn000.data.put("value", t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConditionMsg() throws ParseException {
 /*@bgen(jjtree) ConditionMsg */
  ASTConditionMsg jjtn000 = new ASTConditionMsg(JJTCONDITIONMSG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String msg;
    try {
      jj_consume_token(CONDITION);
      jj_consume_token(LPAREN);
      CondType();
      jj_consume_token(COMMA);
      PriorTo();
      jj_consume_token(COMMA);
      msg = StringLiteral();
                                                                        jjtn000.data.put("value",msg);
      jj_consume_token(RPAREN);
      EOS();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CondType() throws ParseException {
 /*@bgen(jjtree) CondType */
  ASTCondType jjtn000 = new ASTCondType(JJTCONDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDTYPE_ASSET:
        t = jj_consume_token(CONDTYPE_ASSET);
        break;
      case MSG_CREDIT:
        t = jj_consume_token(MSG_CREDIT);
        break;
      case CONDTYPE_INCOME:
        t = jj_consume_token(CONDTYPE_INCOME);
        break;
      case CONDTYPE_PROPERTY:
        t = jj_consume_token(CONDTYPE_PROPERTY);
        break;
      case CONDTYPE_PURCHASE:
        t = jj_consume_token(CONDTYPE_PURCHASE);
        break;
      case CONDTYPE_TITLE:
        t = jj_consume_token(CONDTYPE_TITLE);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                       jjtc000 = false;
                                                                                                                                       jjtn000.data.put("value", t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PriorTo() throws ParseException {
 /*@bgen(jjtree) PriorTo */
  ASTPriorTo jjtn000 = new ASTPriorTo(JJTPRIORTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDPRIORTO_DOCS:
        t = jj_consume_token(CONDPRIORTO_DOCS);
        break;
      case CONDPRIORTO_FUNDING:
        t = jj_consume_token(CONDPRIORTO_FUNDING);
        break;
      case CONDPRIORTO_APPROVAL:
        t = jj_consume_token(CONDPRIORTO_APPROVAL);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                  jjtc000 = false;
                                                                                  jjtn000.data.put("value", t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VarRef() throws ParseException {
 /*@bgen(jjtree) VarRef */
 ASTVarRef jjtn000 = new ASTVarRef(JJTVARREF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String nm;
    try {
      nm = Name();
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.data.put("Name",nm);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VarCast() throws ParseException {
 /*@bgen(jjtree) VarCast */
  ASTVarCast jjtn000 = new ASTVarCast(JJTVARCAST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      VariableType();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableType() throws ParseException {
 /*@bgen(jjtree) VariableType */
  ASTVariableType jjtn000 = new ASTVariableType(JJTVARIABLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DPM:
        jj_consume_token(DPM);
        break;
      case DSM:
        jj_consume_token(DSM);
        break;
      case PPM:
        jj_consume_token(PPM);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AndOperator() throws ParseException {
 /*@bgen(jjtree) AndOperator */
  ASTAndOperator jjtn000 = new ASTAndOperator(JJTANDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND1:
        jj_consume_token(AND1);
        break;
      case AND2:
        jj_consume_token(AND2);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OrOperator() throws ParseException {
 /*@bgen(jjtree) OrOperator */
  ASTOrOperator jjtn000 = new ASTOrOperator(JJTOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR1:
        jj_consume_token(OR1);
        break;
      case OR2:
        jj_consume_token(OR2);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_3R_40() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(NUMERIC_CONSTANT)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(GEQ)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(LEQ)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(EQU)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(NEQ2)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(NEQ1)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(RAISETO)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(OR2)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(OR1)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(AND2)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_21()) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(AND1)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_21()) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_29()) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_30()) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(RULE)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(NUMERIC_CONSTANT)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(RULE)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(RULESET)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  public GdlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[57];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x18003780,0x3780,0x18000000,0x2000000,0x0,0x0,0x1400,0x3f0000,0x3f0000,0x1c00000,0x18002000,0x7400,0x0,0x0,0x8000000,0x10000000,0x1c000000,0x1c000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x60000000,0x60000000,0x60000000,0x2000,0x0,0x0,0x0,0x0,0x0,0x1c00,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x28000000,0x28000000,0x0,0x0,0x0,0x0,0xc080000,0x0,0x4080000,0xc080000,0x0,0x0,0x0,0x0,0x0,0x38,0x2,0x0,0x0,0x0,0x28080000,0x0,0x8080000,0x0,0x8080000,0x8080000,0x0,0x0,0x0,0x0,0x0,0x20080000,0x0,0x0,0x0,0x0,0x8080000,0x740,0xc0,0x700,0xfc00,0x70000,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x8000000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x8000000,0x10,0x0,0x8000000,0x4000000,0x10,0x10,0x0,0x0,0x0,0x0,0x3c00000,0x3f8000,0x3f8000,0x8000000,0x3c00000,0x8000000,0x3f8000,0x8000000,0x0,0xc00,0xc00,0x3000,0x3000,0x4000,0x8000800,0x8000000,0x8000000,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00000,0x3000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public GdlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public GdlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GdlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public GdlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GdlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public GdlParser(GdlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(GdlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[94];
    for (int i = 0; i < 94; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 57; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 94; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
