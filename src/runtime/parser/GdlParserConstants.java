/* Generated By:JJTree&JavaCC: Do not edit this line. GdlParserConstants.java */
package runtime.parser;

public interface GdlParserConstants {

  int EOF = 0;
  int ALIAS = 7;
  int INCLUDE = 8;
  int IMPORT = 9;
  int DPM = 10;
  int DSM = 11;
  int PPM = 12;
  int LOOKUP = 13;
  int POWERLOOKUP = 14;
  int DECISION = 15;
  int BOOLEAN = 16;
  int DATE = 17;
  int MONEY = 18;
  int NUMERIC = 19;
  int PERCENTAGE = 20;
  int TEXT = 21;
  int APPLICATION = 22;
  int CREDIT = 23;
  int PRODUCT = 24;
  int GUIDELINE = 25;
  int INSERT_PRICING_GUIDELINE = 26;
  int RULESET = 27;
  int RULE = 28;
  int MESSAGE = 29;
  int CONDITION = 30;
  int IF = 31;
  int THEN = 32;
  int ELSE = 33;
  int END = 34;
  int TRUE = 35;
  int FALSE = 36;
  int CONTINUE = 37;
  int MSG_EXC = 38;
  int MSG_EXC_ASSETS = 39;
  int MSG_FINDINGS = 40;
  int MSG_OBSERVATION = 41;
  int MSG_CREDIT = 42;
  int CONDTYPE_ASSET = 43;
  int CONDTYPE_INCOME = 44;
  int CONDTYPE_PROPERTY = 45;
  int CONDTYPE_PURCHASE = 46;
  int CONDTYPE_TITLE = 47;
  int CONDPRIORTO_DOCS = 48;
  int CONDPRIORTO_FUNDING = 49;
  int CONDPRIORTO_APPROVAL = 50;
  int NUMERIC_CONSTANT = 51;
  int INTEGER_LITERAL = 52;
  int DECIMAL_LITERAL = 53;
  int HEX_LITERAL = 54;
  int OCTAL_LITERAL = 55;
  int FLOATING_POINT_LITERAL = 56;
  int EXPONENT = 57;
  int CHARACTER_LITERAL = 58;
  int STRING_LITERAL = 59;
  int CODE_BLOCK = 60;
  int LPAREN = 61;
  int RPAREN = 62;
  int LBRACE = 63;
  int RBRACE = 64;
  int LBRACKET = 65;
  int RBRACKET = 66;
  int SEMICOLON = 67;
  int COMMA = 68;
  int DOT = 69;
  int PL = 70;
  int ASSIGN = 71;
  int QUOTE = 72;
  int DQUOTE = 73;
  int PLUS = 74;
  int MINUS = 75;
  int MULT = 76;
  int DIV = 77;
  int RAISETO = 78;
  int EQU = 79;
  int NEQ1 = 80;
  int NEQ2 = 81;
  int LT = 82;
  int GT = 83;
  int LEQ = 84;
  int GEQ = 85;
  int AND1 = 86;
  int AND2 = 87;
  int OR1 = 88;
  int OR2 = 89;
  int STRING = 90;
  int IDENTIFIER = 91;
  int LETTER = 92;
  int DIGIT = 93;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"alias\"",
    "\"include\"",
    "\"import\"",
    "\"dpm\"",
    "\"dsm\"",
    "\"ppm\"",
    "\"lookup\"",
    "\"powerlookup\"",
    "\"decision\"",
    "\"boolean\"",
    "\"date\"",
    "\"money\"",
    "\"numeric\"",
    "\"percentage\"",
    "\"text\"",
    "\"app\"",
    "\"crd\"",
    "\"prd\"",
    "\"guideline\"",
    "\"InsertPricingGuideline\"",
    "\"ruleset\"",
    "\"rule\"",
    "\"message\"",
    "\"condition\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"end\"",
    "<TRUE>",
    "<FALSE>",
    "\"continue\"",
    "\"exception\"",
    "\"assets\"",
    "\"findings\"",
    "\"observation\"",
    "\"credit\"",
    "\"asset\"",
    "\"income\"",
    "\"property\"",
    "\"purchase\"",
    "\"title\"",
    "\"docs\"",
    "\"funding\"",
    "\"approval\"",
    "<NUMERIC_CONSTANT>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<CODE_BLOCK>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"PL\"",
    "\"=\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"==\"",
    "\"!=\"",
    "\"<>\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"&&\"",
    "\"and\"",
    "\"||\"",
    "\"or\"",
    "\"$\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
